//m=pivot element position
#include <stdio.h>
void DAC_QS(int[],int ,int);
int partition(int[],int,int);
void swap(int*,int*);
int main()
{
    int a[100],n,i;
    printf("Enter the array size(max 100):");
    scanf("%d",&n);
    printf("Enter array elements:");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    DAC_QS(a,0,n-1);
    printf("Sorted Array:");
    for(i=0;i<n;i++)
    {
        printf("%d\t",a[i]);
    }
    return 0;
}
void DAC_QS(int a[],int p,int q)
{
    int m;
    if(p<q)
    {
        m=partition(a,p,q);//DIVIDE--Time Complexity=O(n)
        DAC_QS(a,p,m-1);//Conquer--T(m-p)
        DAC_QS(a,m+1,q);//Conquer--T(q-m)
    }
}

int partition(int a[],int p,int q)
{
    int x,i,j,temp;
    x=a[p];
    i=p;
    for(j=p+1;j<=q;j++)
    {
        if(a[j]<=x)
        {
            i=i+1;
            swap(&a[i],&a[j]);
        }
    }
    swap(&a[p],&a[i]);
    
     
    return (i);
}
void swap(int *i,int *j)
{
    int temp;
    temp=*i;
    *i=*j;
    *j=temp;
}
/*Recurrence Relation of DAC_QS() for Time
  1.T(n)=O(1),if n=1 
  2.T(n)=O(n)+T(m-p)+T(q-m),if n>1
    2.1:For Best Case:T(n)=O(n)+2*T(n/2)
        By applying masters theorem, 
        Time complexity=O(nlogn)(Best Case)
    2.2:For Worst Case:T(n)=O(n)+T(n-1)+T(0)
        By applying Recursive Tree Method,
        This recurrence relation will give n level tree 
        each of cost n
        Time complexity=O(n^2)(Worst Case)
*/
