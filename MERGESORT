#include<stdio.h>
int DAC_Mergesort(int[],int,int);
int merge(int[],int,int,int,int);
int a[100];
void main()
{
      int n,i;
    printf("Enter the array size(max 100):");
    scanf("%d",&n);
    printf("Enter array elements:");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    DAC_Mergesort(a,0,n-1);
    printf("Sorted Array:");
    for(i=0;i<n;i++)
    {
        printf("%d\t",a[i]);
    }
}
int DAC_Mergesort(int a[],int i,int j)
{
     int mid;
    if(i==j)
    return(a[i]);
    else
    {
        mid=floor((i+j)/2);//DIVIDE--Time Complexity=O(1)
        DAC_Mergesort(a,i,mid);//CONQUER--T(n/2)
        DAC_Mergesort(a,mid+1,j);//CONQUER--T(n/2)
        merge(a,i,mid,mid+1,j);//MERGE algorithm Time Complexity=O(n)
    }
}
int merge(int a[],int i,int j,int k,int l)
{
   int i1=i;
   int l2=l;
    int b[100],m=0,q;
      while(i<=j&&k<=l)
      {
      if(a[i]<=a[k])
      {
          b[m++]=a[i++];
      }
      else
      {
          b[m++]=a[k++];
      }
      }
      while(i<=j)
      {
          b[m++]=a[i++];
      }
       while(k<=l)
      {
          b[m++]=a[k++];
      }
    
      for(i=i1,q=0;i<=l;i++,q++)
		a[i]=b[q];
}
/*Recurrence Relation of DAC_Mergesort() for Time
  T(n)=O(1),if n=1 
  T(n)=O(1)+2*T(n/2)+O(n),if n>1
*/
/*By applying masters theorem, 
  Time complexity=O(n*logn)(Every case)
*/
